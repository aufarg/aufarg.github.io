<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>aufarg:/var/log $ _ - ctf</title><link href="https://aufarg.github.io/" rel="alternate"></link><link href="https://aufarg.github.io/feeds/ctf.atom.xml" rel="self"></link><id>https://aufarg.github.io/</id><updated>2017-07-18T00:59:14+07:00</updated><entry><title>MeePwn CTF 2017: Simpler RSA (100)</title><link href="https://aufarg.github.io/meepwn-ctf-2017-simpler-rsa-100.html" rel="alternate"></link><published>2017-07-18T00:59:14+07:00</published><updated>2017-07-18T00:59:14+07:00</updated><author><name>Aufar Gilbran</name></author><id>tag:aufarg.github.io,2017-07-18:/meepwn-ctf-2017-simpler-rsa-100.html</id><summary type="html">&lt;p&gt;We are given two files: one is &lt;code&gt;simple.py&lt;/code&gt;, which used to do an encryption, and &lt;code&gt;pubkey.txt&lt;/code&gt;,
which is the generated public key when encrypting with &lt;code&gt;simple.py&lt;/code&gt;. Here's the content of
&lt;code&gt;simpe.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Util.number&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# from flag import FLAG&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;p â€¦&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;We are given two files: one is &lt;code&gt;simple.py&lt;/code&gt;, which used to do an encryption, and &lt;code&gt;pubkey.txt&lt;/code&gt;,
which is the generated public key when encrypting with &lt;code&gt;simple.py&lt;/code&gt;. Here's the content of
&lt;code&gt;simpe.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Util.number&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# from flag import FLAG&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;FLAG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pubkey.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{0}:{1}:{2}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enc.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this code, we can see that the value of &lt;code&gt;n&lt;/code&gt; will be about 270 bits, which is quite small to
be factorized. Let's try factorize &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The best factorization algorithm that I know of is &lt;a href="https://en.wikipedia.org/wiki/Quadratic_sieve"&gt;quadratic
sieve&lt;/a&gt;, which apparently could
factorize 270 bits integer quite fast. Looking for good implementation
quadratic sieve, I came across &lt;a href="https://github.com/radii/msieve"&gt;msieve&lt;/a&gt;. The
README says it is appropriate for integers with less than 100 digits. Running
msieve yield &lt;code&gt;p = 1057817919251064684989791981&lt;/code&gt; and &lt;code&gt;q =
1103935256393984899021164397&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To decrypt each number in &lt;code&gt;c&lt;/code&gt;, we need find &lt;code&gt;m&lt;/code&gt; which is passed to &lt;code&gt;encrypt&lt;/code&gt; function. Since &lt;code&gt;m&lt;/code&gt;
will be in &lt;code&gt;[1-255]&lt;/code&gt;, this can be done by brute-forcing &lt;code&gt;m&lt;/code&gt; and then validate if it is the right
byte. But, how can we validate &lt;code&gt;m&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Doing &lt;code&gt;pow(x,1,n)&lt;/code&gt; basically means &lt;span class="math"&gt;\(x \pmod n\)&lt;/span&gt;, so we have two terms for the
encryption, &lt;code&gt;pow(g, m, n)&lt;/code&gt; and &lt;code&gt;pow(h, r, n)&lt;/code&gt;. We can cancel out &lt;code&gt;pow(g, m, n)&lt;/code&gt;
by multiplying &lt;code&gt;c&lt;/code&gt; with inverse modulo &lt;span class="math"&gt;\(g^{m} \pmod n\)&lt;/span&gt;. This leave us with
&lt;code&gt;pow(h, r, n)&lt;/code&gt;. At initialization, &lt;code&gt;h = pow(g, n, n)&lt;/code&gt; means &lt;code&gt;pow(h, r, n)&lt;/code&gt; is
the same as &lt;code&gt;pow(g, n*r, n)&lt;/code&gt;. Now, to cancel this term, we need to multiply it
with inverse modulo of &lt;span class="math"&gt;\(g^{nr}\)&lt;/span&gt;. But the &lt;code&gt;r&lt;/code&gt; is chosen randomly when
encrypting, so we don't know the value of &lt;span class="math"&gt;\(g^{nr}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To cancel &lt;span class="math"&gt;\(g^{nr}\)&lt;/span&gt;, we don't need to find the inverse modulo, we can instead find &lt;span class="math"&gt;\(x\)&lt;/span&gt; such that
&lt;span class="math"&gt;\(g^{xnr} \equiv 1 \pmod n\)&lt;/span&gt;. From &lt;a href="https://en.wikipedia.org/wiki/Euler's_theorem"&gt;Euler's
theorem&lt;/a&gt;, we know that if &lt;span class="math"&gt;\((xnr) \equiv 0
\pmod{\phi{( n )}}\)&lt;/span&gt;, then &lt;span class="math"&gt;\(g^{xnr} \equiv 1 \pmod n\)&lt;/span&gt;. Thus, &lt;span class="math"&gt;\(x\)&lt;/span&gt; is &lt;span class="math"&gt;\(\phi{( n )}/gcd(\phi{(n)},
n)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If we pick the wrong &lt;code&gt;m&lt;/code&gt; (let's say guessed &lt;code&gt;m&lt;/code&gt; is &lt;span class="math"&gt;\(m'\)&lt;/span&gt; and the actual &lt;code&gt;m&lt;/code&gt; is &lt;span class="math"&gt;\(m\)&lt;/span&gt;), this leave
the term &lt;span class="math"&gt;\(g^{m'-m}\)&lt;/span&gt;, which will not be equal to zero.&lt;/p&gt;
&lt;p&gt;Here's the Python script to decrypt the ciphers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# public keys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1235280093599323856390922798440377476467763531842392869674688408727824382702235317&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1110549711091392805024587195974719739929628997819528005374351081843256209971586072&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;610466084395822279908554174354632326166097007218620288020807622478449585661028278&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# primes of n&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1057817919251064684989791981&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1103935256393984899021164397&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;totient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;totient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totient&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;totient&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;invmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="il"&gt;1042684026433440609442082085056733059350277230855631475910449335289565957026925888L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;337451979363258259789969117391527857381178461709773977486124377788140579446959643L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;955044246855117318302069848746627916980637349888954523552188603828273408620783185L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;565084528151941455613387670829541401837686258558304725363697970401158298304784226L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1217257199494998716855441753878986048959547533911751395319106679987808998530722005L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;500431401136979664818320806505265313829298163109190333815615071157569573408761776L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;918364738570517634370611128928418073524271175997413722821007998543195365584145047L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1231818404429995719463458343454764290314747233553619629902141039984717307144020885L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;578663363706556074852662555903558050626510818844939214634690712022753850484044077L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;170573141141793020278685561667014942396340687197982787584671361315770701412232820L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;525046404028002961161648698133126471909762913783905233407759137018767422695415644L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;548918541683229869313458652944252600295112072416629330975730507209045241266103104L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1097888538672145356012505481951969976746432194049237781078685846091302406138295450L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;467055824810727038529002950991149449402485370247343520114443047715384113252663243L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;379325228947504950566222318955652420189554769276755237788381017120582088704791796L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;808135517143354496893964869359259307455178022544381266003759602027195395780858971L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;232206696206622845104449934990777760916638497611027428059484100417419468488368534L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;611231502156630905749534239244947175924425232566020566839692916151929122262556160L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;266317680779170923895607136980535234290396471711461778811550899033797067803838490L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;458442169696983024890517742499158555610082173984048562536247204694360339657234325L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;173156860778775111311074302992389403207838028758953619505920477407616091727957249L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;327701451317276442403593523928518039719286029867533592333080575014882858204660392L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1061889651976594791626195662010361995350291121541576461530446716234559629390059206L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;501107468516571472868902583880130438298825499145194993732906902954639206415408661L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;793462123972295663612808938124574874398657924694272939619742740367249265250881187L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;419580729971386599858472445685002497860174205402938481254320715563201540618526181L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1095670842511297949652166375966107611580541850315423104099581710112461928501516645L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1207404101728741308518114885496775915613418535791624006547396431596035842097919854L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;63257756791404477719948396035346460877053804738003821615924989712602434088623116L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;709743404772556668186521811311910146690879578711491970215935941312652194503904278L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;472145667401895260338686064243470672627707713552548730414485106260542589178719305L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;671679182553553455773258809387401495029229971280677124071355178172582087439182089L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;795683594959663064302728712706823881033923895027131034114737749301583410828859935L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;788511687111620345727088836755516496428115065618134997006646145097528302404655271L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;493455498376449391174132961453557751413575238351804592824587799692504725075730030L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1071336432168555760392522471606603558083343440707490972056560901765084761996537479L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;76414279730707452882500835328589558586805800097281864786868179845530554318636818L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1026789233929477564953495880177610952920067780854127113113934470636602509593246257L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1220456099417710433363957577456670914480321272794999438920511570648408214807875401L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;831001855794529333359541390744984608592774868529241373516540331083225538929223854L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;406700540669900202178972508513521627652422698239818055618399192500676530118703988L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;535793870780869641948563592689023912632863260901941937211057060307409713921739965L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;908165522898293977370960880692560887898587015153655232763363739940417879927826149L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;916463042698051909403902218425035797085521743060997736870228165259059940402603712L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1124064575055728289901493663250187815236366261544380516480084011806758657972869579L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;302544873761485689612490183241038411927316560916804219683347601892406383914571353L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;326809752614724517585542018284901481393260541798889339649409227233748588383860516L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;828292723696438834080952146252731883891295126479141546958923438287859173086057154L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;835877660712133206131980242990809426528248997858916518574414436451562226433887025L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;145587585798997332370407645289128453608803108424500991984349925153212212859373727L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;463948250139563696175107900326108271430940645044009515704115508942300583165355378L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;944242052057563352409261236875599145504153562928055236566287627433096232314943101L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;579193856270128178962709647899702648998261560149392089962175236519890756116448359L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;1167987057311285845643231967769257342900085143163437221731184706561190379437889873L&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;invmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flag is: &lt;code&gt;MeePwnCTF{well_is_fact0rizati0n_0nly_w4y_to_s0lve_it?}&lt;/code&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="ctf-writeup"></category><category term="meepwn-ctf"></category></entry></feed>